#!/bin/bash

# Cores para output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîß Corrigindo conex√£o do WhatsApp...${NC}"

# 1. Verificar se o backend est√° rodando
echo -e "${BLUE}1Ô∏è‚É£ Verificando status do backend...${NC}"
if ! pm2 list | grep -q "whatsapp-backend.*online"; then
  echo -e "${RED}‚ùå Backend n√£o est√° rodando. Iniciando...${NC}"
  cd /root/whatsapp-web
  pm2 start ecosystem.config.js --only whatsapp-backend
  sleep 5
else
  echo -e "${GREEN}‚úÖ Backend est√° rodando${NC}"
fi

# 2. Verificar depend√™ncias do Puppeteer
echo -e "${BLUE}2Ô∏è‚É£ Verificando depend√™ncias do Puppeteer...${NC}"
echo -e "${YELLOW}‚ö†Ô∏è Instalando depend√™ncias do Chrome/Puppeteer...${NC}"

# Instalar depend√™ncias do Chrome
apt-get update
apt-get install -y \
    gconf-service \
    libasound2 \
    libatk1.0-0 \
    libc6 \
    libcairo2 \
    libcups2 \
    libdbus-1-3 \
    libexpat1 \
    libfontconfig1 \
    libgcc1 \
    libgconf-2-4 \
    libgdk-pixbuf2.0-0 \
    libglib2.0-0 \
    libgtk-3-0 \
    libnspr4 \
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libstdc++6 \
    libx11-6 \
    libx11-xcb1 \
    libxcb1 \
    libxcomposite1 \
    libxcursor1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxi6 \
    libxrandr2 \
    libxrender1 \
    libxss1 \
    libxtst6 \
    ca-certificates \
    fonts-liberation \
    libappindicator1 \
    libnss3 \
    lsb-release \
    xdg-utils \
    wget

echo -e "${GREEN}‚úÖ Depend√™ncias do Chrome instaladas${NC}"

# 3. Verificar e corrigir configura√ß√£o do WhatsApp no backend
echo -e "${BLUE}3Ô∏è‚É£ Verificando configura√ß√£o do WhatsApp no backend...${NC}"

# Verificar se o diret√≥rio de sess√µes existe
if [ ! -d "/root/whatsapp-web/backend/sessions_simple" ]; then
  echo -e "${YELLOW}‚ö†Ô∏è Diret√≥rio de sess√µes n√£o encontrado. Criando...${NC}"
  mkdir -p /root/whatsapp-web/backend/sessions_simple
  chmod 777 /root/whatsapp-web/backend/sessions_simple
  echo -e "${GREEN}‚úÖ Diret√≥rio de sess√µes criado${NC}"
else
  echo -e "${GREEN}‚úÖ Diret√≥rio de sess√µes existe${NC}"
  # Limpar sess√µes antigas
  echo -e "${YELLOW}‚ö†Ô∏è Limpando sess√µes antigas...${NC}"
  rm -rf /root/whatsapp-web/backend/sessions_simple/*
  echo -e "${GREEN}‚úÖ Sess√µes antigas removidas${NC}"
fi

# 4. Verificar e corrigir o servi√ßo WhatsApp no backend
echo -e "${BLUE}4Ô∏è‚É£ Verificando servi√ßo WhatsApp no backend...${NC}"

# Verificar se o arquivo whatsapp-simple.ts existe
if [ ! -f "/root/whatsapp-web/backend/src/services/whatsapp-simple.ts" ]; then
  echo -e "${RED}‚ùå Arquivo whatsapp-simple.ts n√£o encontrado${NC}"
else
  echo -e "${GREEN}‚úÖ Arquivo whatsapp-simple.ts encontrado${NC}"
fi

# 5. Instalar Puppeteer globalmente
echo -e "${BLUE}5Ô∏è‚É£ Instalando Puppeteer globalmente...${NC}"
npm install -g puppeteer
echo -e "${GREEN}‚úÖ Puppeteer instalado globalmente${NC}"

# 6. Instalar Puppeteer no projeto
echo -e "${BLUE}6Ô∏è‚É£ Instalando Puppeteer no projeto...${NC}"
cd /root/whatsapp-web
npm install puppeteer
cd /root/whatsapp-web/backend
npm install puppeteer
echo -e "${GREEN}‚úÖ Puppeteer instalado no projeto${NC}"

# 7. Configurar vari√°veis de ambiente para o Puppeteer
echo -e "${BLUE}7Ô∏è‚É£ Configurando vari√°veis de ambiente para o Puppeteer...${NC}"
export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
export PUPPETEER_EXECUTABLE_PATH=$(which google-chrome || which chromium-browser || which chromium)

if [ -z "$PUPPETEER_EXECUTABLE_PATH" ]; then
  echo -e "${RED}‚ùå Chrome/Chromium n√£o encontrado. Instalando Google Chrome...${NC}"
  wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
  echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list
  apt-get update
  apt-get install -y google-chrome-stable
  export PUPPETEER_EXECUTABLE_PATH=$(which google-chrome)
  echo -e "${GREEN}‚úÖ Google Chrome instalado: $PUPPETEER_EXECUTABLE_PATH${NC}"
else
  echo -e "${GREEN}‚úÖ Chrome/Chromium encontrado: $PUPPETEER_EXECUTABLE_PATH${NC}"
fi

# Adicionar vari√°veis ao .env do backend
echo -e "${YELLOW}‚ö†Ô∏è Adicionando vari√°veis ao .env do backend...${NC}"
if ! grep -q "PUPPETEER_EXECUTABLE_PATH" /root/whatsapp-web/backend/.env; then
  echo "PUPPETEER_EXECUTABLE_PATH=$PUPPETEER_EXECUTABLE_PATH" >> /root/whatsapp-web/backend/.env
  echo "PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true" >> /root/whatsapp-web/backend/.env
  echo -e "${GREEN}‚úÖ Vari√°veis adicionadas ao .env${NC}"
else
  echo -e "${GREEN}‚úÖ Vari√°veis j√° existem no .env${NC}"
fi

# 8. Modificar o c√≥digo do servi√ßo WhatsApp para usar o Chrome instalado
echo -e "${BLUE}8Ô∏è‚É£ Modificando c√≥digo do servi√ßo WhatsApp...${NC}"

# Fazer backup do arquivo original
cp /root/whatsapp-web/backend/src/services/whatsapp.ts /root/whatsapp-web/backend/src/services/whatsapp.ts.bak

# Modificar o arquivo para usar o Chrome instalado
sed -i "s|puppeteer: {|puppeteer: {\n      executablePath: process.env.PUPPETEER_EXECUTABLE_PATH,|" /root/whatsapp-web/backend/src/services/whatsapp.ts

echo -e "${GREEN}‚úÖ C√≥digo do servi√ßo WhatsApp modificado${NC}"

# 9. Recompilar o backend
echo -e "${BLUE}9Ô∏è‚É£ Recompilando o backend...${NC}"
cd /root/whatsapp-web/backend
npm run build
echo -e "${GREEN}‚úÖ Backend recompilado${NC}"

# 10. Reiniciar o backend
echo -e "${BLUE}üîü Reiniciando o backend...${NC}"
cd /root/whatsapp-web
pm2 restart whatsapp-backend
echo -e "${GREEN}‚úÖ Backend reiniciado${NC}"

# 11. Aguardar inicializa√ß√£o
echo -e "${YELLOW}‚ö†Ô∏è Aguardando inicializa√ß√£o do backend (30 segundos)...${NC}"
sleep 30

# 12. Verificar logs para confirmar que o QR Code est√° sendo gerado
echo -e "${BLUE}1Ô∏è‚É£2Ô∏è‚É£ Verificando logs para confirmar gera√ß√£o do QR Code...${NC}"
if pm2 logs whatsapp-backend --lines 50 --nostream | grep -q "QR Code"; then
  echo -e "${GREEN}‚úÖ QR Code est√° sendo gerado! Acesse a interface web para escanear.${NC}"
else
  echo -e "${RED}‚ùå QR Code n√£o detectado nos logs. Verifique os logs completos.${NC}"
fi

# 13. Instru√ß√µes finais
echo -e "${BLUE}üìã Instru√ß√µes para conectar o WhatsApp:${NC}"
echo -e "1. Acesse ${GREEN}https://wconnect.repagil.com.br/dashboard/whatsapp${NC}"
echo -e "2. Clique em ${GREEN}Reiniciar Conex√£o / Novo QR Code${NC}"
echo -e "3. Escaneie o QR Code com seu WhatsApp"
echo -e "4. Aguarde a confirma√ß√£o de conex√£o"
echo -e "5. Para monitorar o processo, execute: ${GREEN}pm2 logs whatsapp-backend${NC}"

echo -e "${GREEN}üöÄ Script de corre√ß√£o do WhatsApp finalizado!${NC}"
